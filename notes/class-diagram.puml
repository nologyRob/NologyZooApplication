@startuml

enum AnimalTypes {
    LION
    LLAMA
    CROCODILE
}

enum CommandTypes {
    LOGIN
    VISITOR
    ANIMAL
    ZOOKEEPER
    EXIT
}

enum UserTypes {
    VISITOR
    ZOOKEEPER
}

abstract class Animal {
- name : String
- name : String
- id : String
- type : String
- canPet : boolean
- hunger : int
- popularity : int
+ getType() : String
+ isCanPet() : boolean
+ getName() : String
+ getId() : String
+ getHunger() : String
+ feedAnimal() : void
+ pet() : void
+ receiveToken() : void
+ getInformation() : String
+ isMatch() : boolean
+ {abstract} makeSound() : void
}

class Crocodile {
+ makeSound() : void
}

class Lion {
+ makeSound() : void
}

class Llama {
+ makeSound() : void
}

abstract class Commands {
    # name : String
    # nextCommands : CommandTypes
    - scanner : Scanner
    - commands : String[]
    + getNextCommands() : CommandTypes
    + setNextCommands() : void
    # printMessage() : void
    # printGreeting() : void
    # getIntegerInput() : int
    # getIntegerInput() : int
    # printIndexedCommands() : void
    # printIndexedCommands() : void
    # printIndexedCommands() : void
    # getStringInput() : String
    + {abstract} printCommands() : void
    + {abstract} runCommands() : void
}

class AnimalCommands {
    - zoo : Zoo
    - printAllAnimals() : void
    - printAnimalsByType() : void
    - visitAnimal() : void
    - visitRandomAnimal() : void
    - interactWithAnimal() : void
    + printCommands() : void
    + runCommands() : void
}

class LoginCommands {
    - zoo : Zoo
    - authentication : Auth
    - createVisitor() : void
    - loginUser() : boolean
    + printCommands() : void
    + runCommands() : void
}

class VisitorCommands {
    - zoo : Zoo
    - authentication : Auth
    - printOverview() : void
    - updateUser() : void
    + printCommands() : void
    + runCommands() : void
}

class ZooKeeperCommands {
    - zoo : Zoo
    - authentication : Auth
    - printHungryAnimals() : void
    - feedHungryAnimals() : void
    - addAnimal() : void
    - removeAnimal() : void
    - searchZoo() : void
    + printCommands() : void
    + runCommands() : void
}

class Auth {
    - visitors : List<User>
    - zookeepers : List<User>
    - currentUser : User
    + createVisitor() : void
    + logOut() : void
    + logIn() : boolean
    + getVisitors() : List<User>
    + getZookeepers() : List<User>
    + getCurrentUser() : User
    + addZookeeper() : void
    + addVisitor() : void
}

class AuthFactory {
    + {static} populateAuth() : void
}

abstract class User {
    # id : String
    # name : String
    # type : UserTypes
    - password : String
    + getId() : String
    + getName() : String
    + setName() : void
    + authenticate() : boolean
    + isMatch() : boolean
}

class Visitor {
    - animalTokens : int
    - happiness : int
    + incrementHappiness() : void
    + decrementHappiness() : void
    + getAnimalTokens() : int
    + spendToken() : void
    + getInformation() : String
}

class ZooKeeper {
    + getInformation() : String
}

class CSVDataLoader {
    + createDictionary() : Map<String, Integer>
    + createUsers() : List<String[]>
}

interface DataLoader {
    + createDictionary() : Map<String, Integer>
    + createUsers() : List<String[]>
}

interface Searchable {
    + isMatch() : boolean
    + getInformation() : String
}

class Zoo {
    - animals : List<Animal>
    - animalTypes : List<String>
    - authentication : Auth
    - animalDictionary : Map<String, Animal>
    - animalsByTypeDictionary : Map<String, List<Animal>>
    + addAnimalTypes() : void
    + createAnimal() : void
    + addAnimal() : void
    - addToAnimalDictionary() : void
    - addToAnimalsByTypeDictionary() : void
    + searchZoo() : ArrayList<String>
    + hasAnimal() : boolean
    + getRandomAnimalId() : String
    + getAnimalTypes() : List<String>
    + getZooOverview() : String
    + getAnimalInformation() : String
    + getAnimalInformation() : String
    + getAnimalInformationByType() : String
    + getAllAnimalsInformation() : String
    + getUsersName() : String
    + getHungryAnimals() : List<Animal>
    + getHungryAnimalInformation() : String
    + feedHungryAnimals() : void
    + updateUser() : void
    + petAnimal() : boolean
    + spendAnimalToken() : boolean
    + removeAnimal() : boolean
}

class ZooFactory {
    + {static} createAnimal() : void
    - {static} populateAnimalTypes() : void
    - {static} populateAnimals() : void
    + {static} populateZoo() : void
}

'class Main
'Main *-- Zoo
'Main *-- Auth
'Main *-- VisitorCommands
'Main *-- ZooKeeperCommands
'Main *-- AnimalCommands
'Main *-- LoginCommands

Auth -- LoginCommands
Auth -- VisitorCommands
Auth -- ZooKeeperCommands

Zoo -- VisitorCommands
Zoo -- ZooKeeperCommands
Zoo -- AnimalCommands

Crocodile <|-- Animal
Lion <|-- Animal
Llama <|-- Animal

AnimalCommands <|-- Commands
LoginCommands <|-- Commands
VisitorCommands <|-- Commands
ZooKeeperCommands <|-- Commands

Visitor o-- Auth
ZooKeeper o-- Auth
AuthFactory -- Auth

Visitor <|-- User
ZooKeeper <|-- User

User <|.. Searchable
Animal <|.. Searchable

Crocodile o-- Zoo
Llama o-- Zoo
Lion o-- Zoo

ZooFactory -- Zoo

CSVDataLoader <|.. DataLoader

@enduml